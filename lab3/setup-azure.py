# This script is made to setup all resources on Azure.
# First it needs to create a new resource group
# then it creates a vector Cosmos DB database with EnableNoSQLVectorSearch capability enabled
# Generated by ChatGPT or based on official docs
# https://learn.microsoft.com/en-us/azure/developer/python/sdk/examples/azure-sdk-example-resource-group

from azure.mgmt.cosmosdb.models import (
    DatabaseAccountCreateUpdateParameters,
    Location,
    ConsistencyPolicy,
)
from azure.identity import DefaultAzureCredential
from azure.mgmt.cosmosdb import CosmosDBManagementClient
from azure.mgmt.cosmosdb.models import Capability
from azure.mgmt.resource import SubscriptionClient
from azure.mgmt.resource import ResourceManagementClient

import configparser


def load_config():
    config = configparser.ConfigParser()
    config.read('config.ini')
    return config


config = load_config()

def get_subscription_id():
    # Authenticate using DefaultAzureCredential (works with `az login`)
    credential = DefaultAzureCredential()
    subscription_client = SubscriptionClient(credential)

    # Get list of subscriptions and print the first (default) one
    subscription = next(subscription_client.subscriptions.list())
    subscription_id = subscription.subscription_id
    return subscription_id


REGION = config.get('azure', 'region')
SUBSCRIPTION_ID = get_subscription_id()
ACCOUNT_NAME = config.get('azure', 'account_name')
RESOURCE_GROUP_NAME = config.get('azure', 'resource_group_name')


def create_resource_group(name, location):
    # Obtain the management object for resources.
    credential = DefaultAzureCredential()
    resource_client = ResourceManagementClient(credential, SUBSCRIPTION_ID)

    # Provision the resource group.
    rg_result = resource_client.resource_groups.create_or_update(
        name, {"location": location}
    )

    print(f"Provisioned resource group {rg_result.name}")
    return rg_result.name


def create_cosmos_db():

    # Capabilities list (including Vector Search)
    capabilities = [Capability(name="EnableNoSQLVectorSearch")]

    # Create the Cosmos DB account
    create_params = DatabaseAccountCreateUpdateParameters(
        location=REGION,
        locations=[Location(location_name=REGION)],
        kind="GlobalDocumentDB",
        capabilities=capabilities,
        consistency_policy=ConsistencyPolicy(
            default_consistency_level="Session"),
        database_account_offer_type="Standard",
    )

    credential = DefaultAzureCredential()
    client = CosmosDBManagementClient(credential, SUBSCRIPTION_ID)
    async_create = client.database_accounts.begin_create_or_update(
        RESOURCE_GROUP_NAME, ACCOUNT_NAME, create_params
    )

    result = async_create.result()
    print(f"Created Cosmos DB account: {result.name}")
    #print(result)


create_resource_group(RESOURCE_GROUP_NAME, REGION)
create_cosmos_db()
