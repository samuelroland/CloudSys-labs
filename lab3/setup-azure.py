# This script is made to setup all resources on Azure.
# First it needs to create a new resource group
# then it creates a vector Cosmos DB database with EnableNoSQLVectorSearch capability enabled
# Generated by ChatGPT or based on official docs
# https://learn.microsoft.com/en-us/azure/developer/python/sdk/examples/azure-sdk-example-resource-group
#

from azure.identity import DefaultAzureCredential
from azure.mgmt.cosmosdb import CosmosDBManagementClient
from azure.mgmt.cosmosdb.models import Capability
from azure.mgmt.resource import SubscriptionClient
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.authorization import AuthorizationManagementClient
from uuid import uuid4

from azure.mgmt.cosmosdb.models import (
    DatabaseAccountCreateUpdateParameters,
    Location,
    ConsistencyPolicy,
)


def get_subscription_id():
    # Authenticate using DefaultAzureCredential (works with `az login`)
    credential = DefaultAzureCredential()
    subscription_client = SubscriptionClient(credential)

    # Get list of subscriptions and print the first (default) one
    subscription = next(subscription_client.subscriptions.list())
    subscription_id = subscription.subscription_id
    return subscription_id


def create_resource_group(name, location):
    # Obtain the management object for resources.
    credential = DefaultAzureCredential()
    resource_client = ResourceManagementClient(credential, subscription_id)

    # Provision the resource group.
    rg_result = resource_client.resource_groups.create_or_update(
        name, {"location": location}
    )

    print(f"Provisioned resource group {rg_result.name}")
    return rg_result.name


# # Authenticate
#
# # Define the capability to be added
# capability = Capability(name="EnableNoSQLVectorSearch")
#
# # Update the Cosmos DB account
# update_params = DatabaseAccountUpdateParameters(capabilities=[capability])
#
# async_update = client.database_accounts.begin_update(
#     resource_group_name, account_name, update_params
# )


def create_cosmos_db():

    # Capabilities list (including Vector Search)
    capabilities = [Capability(name="EnableNoSQLVectorSearch")]

    # Create the Cosmos DB account
    create_params = DatabaseAccountCreateUpdateParameters(
        location=location,
        locations=[Location(location_name=location)],
        kind="GlobalDocumentDB",
        capabilities=capabilities,
        consistency_policy=ConsistencyPolicy(
            default_consistency_level="Session"),
        database_account_offer_type="Standard",
    )

    credential = DefaultAzureCredential()
    client = CosmosDBManagementClient(credential, subscription_id)
    async_create = client.database_accounts.begin_create_or_update(
        resource_group_name, account_name, create_params
    )

    result = async_create.result()
    print(f"Created Cosmos DB account: {result.name}")
    print(result)


def assign_cosmos_role(principal_id, role_definition_id, subscription_id, resource_group_name, account_name):
    credential = DefaultAzureCredential()
    auth_client = AuthorizationManagementClient(credential, subscription_id)
    resource_id = f"/subscriptions/{subscription_id}/resourceGroups/{
        resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/{account_name}"
    role_assignment_id = str(uuid4())
    assignment = auth_client.role_assignments.create(
        scope=resource_id,
        role_assignment_name=role_assignment_id,
        parameters={
            "role_definition_id": role_definition_id,
            "principal_id": principal_id,
        },
    )
    print("Role assignment created:", assignment.id)


location = "switzerlandnorth"  # the region
subscription_id = get_subscription_id()
account_name = "groupdchatbotd1234"
resource_group_name = "groupd-chatbot-deploy"

azure_principal_id = "a8630fe3-668a-4f50-ab53-1aba44f7adaa"
# The role "Cosmos DB Built-in Data Contributor"
role_definition_id = f"/subscriptions/{
    subscription_id}/providers/Microsoft.Authorization/roleDefinitions/?????"
# TODO: find the ID on
# az role definition list | jq | grep Cosmos
#
create_resource_group(resource_group_name, location)
create_cosmos_db()
# TODO: this doesnt work because the role id is not correct and I cannot find what to give, nor create a custom role ourself
assign_cosmos_role(azure_principal_id, role_definition_id,
                   subscription_id, resource_group_name, account_name)
